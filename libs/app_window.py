# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\libs\gui\MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtWidgets import QApplication, QMainWindow, QDialog, QMessageBox, QFileDialog, QSystemTrayIcon, QStyle, \
    QAction, QMenu
import PyQt5.QtQuick

from .screen_capture import ScreenCapture
from .screen_capture import RecorderTypes
from .screen_capture import ResolutionValues
from .file_handler import FileHandler
from .video_compiler import VideoCompiler
from .event_recorder import EventRecorder
from .lapser_recorder import LapserRecorder


class AppWindow(QMainWindow):

    def __init__(self):
        super(AppWindow, self).__init__()
        QCoreApplication.setApplicationName('NBTL')
        self.anit_icon = QtGui.QIcon('./libs/resources/AnitaIcon.ico')

        self.tray_icon = QSystemTrayIcon(self.anit_icon)
        self.central_widget = QtWidgets.QWidget(self)
        self.resolutionLabel = QtWidgets.QLabel(self.central_widget)
        self.resolutionComboBox = QtWidgets.QComboBox(self.central_widget)
        self.statusBar = QtWidgets.QStatusBar(self)
        self.stopButton = QtWidgets.QPushButton(self.central_widget)
        self.mainRecordControlButton = QtWidgets.QPushButton(
            self.central_widget)
        self.titleLabel = QtWidgets.QLabel(self.central_widget)
        self.sessionTypeLabel = QtWidgets.QLabel(self.central_widget)
        self.sessionTypeComboBox = QtWidgets.QComboBox(self.central_widget)
        self.secondsEditBox = QtWidgets.QLineEdit(self.central_widget)
        self.secondsLabel = QtWidgets.QLabel(self.central_widget)
        self.sessionNameLabel = QtWidgets.QLabel(self.central_widget)
        self.sessionNameEditBox = QtWidgets.QLineEdit(self.central_widget)
        self.compileSessionButton = QtWidgets.QPushButton(self.central_widget)
        self.continueRecordingSessionButton = QtWidgets.QPushButton(
            self.central_widget)
        self.newRecordingSessionButton = QtWidgets.QPushButton(
            self.central_widget)
        self.startup()
        # internal variables
        self.currentProjectName = None
        self.recording_resolution = None
        self.recorder_seconds = 0
        self.recorder_type = RecorderTypes.BullShiet.name
        self.current_file_handler = None
        self.recorder_instance = None
        self.is_recorder_paused = False
        self.confirmed_origin_file = None
        self.is_in_tray = False

    def startup(self):
        self.setObjectName("MainWindow")
        self.resize(400, 400)
        size_policy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(size_policy)
        self.setMaximumSize(QtCore.QSize(400, 400))
        self.setWindowIcon(self.anit_icon)
        self.setWindowOpacity(1.0)
        self.central_widget.setObjectName("centralwidget")

        self.newRecordingSessionButton.setGeometry(
            QtCore.QRect(10, 30, 161, 51))
        self.newRecordingSessionButton.setObjectName(
            "newRecordingSessionButton")
        self.newRecordingSessionButton.clicked.connect(self.select_new_session_button_click)

        self.continueRecordingSessionButton.setGeometry(
            QtCore.QRect(10, 100, 161, 51))
        self.continueRecordingSessionButton.setObjectName(
            "continueRecordingSessionButton")
        self.continueRecordingSessionButton.clicked.connect(self.select_session_clicked)

        self.compileSessionButton.setGeometry(QtCore.QRect(10, 320, 161, 51))
        self.compileSessionButton.setObjectName("compileSessionButton")
        self.compileSessionButton.setEnabled(True)
        self.compileSessionButton.clicked.connect(self.compile_button_click)

        self.sessionNameEditBox.setGeometry(QtCore.QRect(280, 40, 113, 20))
        self.sessionNameEditBox.setObjectName("sessionNameEditBox")
        self.sessionNameEditBox.setEnabled(False)

        self.sessionNameLabel.setGeometry(QtCore.QRect(190, 40, 81, 21))
        self.sessionNameLabel.setObjectName("sessionNameLabel")

        self.secondsLabel.setGeometry(QtCore.QRect(190, 130, 71, 21))
        self.secondsLabel.setObjectName("secondsLabel")
        self.secondsLabel.setVisible(False)

        self.secondsEditBox.setGeometry(QtCore.QRect(280, 130, 113, 20))
        self.secondsEditBox.setObjectName("secondsEditBox")
        self.secondsEditBox.setEnabled(False)
        self.secondsEditBox.setVisible(False)

        self.sessionTypeComboBox.setGeometry(QtCore.QRect(280, 100, 111, 22))
        self.sessionTypeComboBox.setObjectName("sessionTypeComboBox")
        self.sessionTypeComboBox.setEnabled(False)
        list_types = RecorderTypes.list_labels()
        for el in enumerate(list_types):
            self.sessionTypeComboBox.insertItem(el[0], el[1])
        # calculate it
        self.toggle_seconds_visibility(list_types[0])

        self.sessionTypeLabel.setGeometry(QtCore.QRect(190, 100, 91, 21))
        self.sessionTypeLabel.setObjectName("sessionTypeLabel")

        self.titleLabel.setGeometry(QtCore.QRect(186, 10, 201, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.titleLabel.setFont(font)
        self.titleLabel.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.titleLabel.setObjectName("titleLabel")

        self.mainRecordControlButton.setGeometry(
            QtCore.QRect(10, 170, 191, 141))
        self.mainRecordControlButton.setObjectName("startButton")
        self.mainRecordControlButton.setEnabled(False)

        self.stopButton.setGeometry(QtCore.QRect(210, 170, 181, 141))
        self.stopButton.setObjectName("stopButton")
        self.stopButton.setEnabled(False)

        self.setCentralWidget(self.central_widget)
        self.statusBar.setObjectName("statusbar")
        self.setStatusBar(self.statusBar)

        self.resolutionComboBox.setGeometry(QtCore.QRect(280, 70, 111, 22))
        self.resolutionComboBox.setObjectName("resolutionComboBox")
        self.resolutionComboBox.setEnabled(False)
        resolutions = ResolutionValues.list_labels()
        for re in enumerate(resolutions):
            self.resolutionComboBox.insertItem(re[0], re[1])

        self.resolutionLabel.setGeometry(QtCore.QRect(190, 70, 81, 21))
        self.resolutionLabel.setObjectName("resolutionLabel")

        # Tray Icon
        toggle_show_action = QAction("Show", self)
        quit_action = QAction("Exit", self)
        toggle_show_action.triggered.connect(self.show_toggle)

        quit_action.triggered.connect(self.close)
        tray_menu = QMenu()
        tray_menu.addAction(toggle_show_action)
        tray_menu.addAction(quit_action)
        self.tray_icon.setContextMenu(tray_menu)
        self.name_ui()
        QtCore.QMetaObject.connectSlotsByName(self)

    def name_ui(self):
        self.setWindowTitle("NBTL")
        self.newRecordingSessionButton.setText("New Recording session")
        self.continueRecordingSessionButton.setText(
            "Continue recording session")
        self.compileSessionButton.setText("Compile session to video file")
        self.sessionNameLabel.setText("Session Name")
        self.sessionTypeLabel.setText("Recording type")
        self.titleLabel.setText("Non BullShiet Time Lapser")
        self.secondsLabel.setText("Seconds")
        self.mainRecordControlButton.setText("Start")
        self.stopButton.setText("Stop")
        self.statusBar.showMessage("Ready", 0)
        self.resolutionLabel.setText("Resolution")

    def toggle_seconds_visibility(self, value):
        self.recorder_type = value
        # something to do with the recording type
        if self.recorder_type == RecorderTypes.BullShiet.name:
            self.secondsLabel.setVisible(True)
            self.secondsEditBox.setVisible(True)
        elif self.recorder_type == RecorderTypes.NonBullShiet.name:
            self.secondsLabel.setVisible(False)
            self.secondsEditBox.setVisible(False)
        else:
            return
        pass

    def change_status_bar(self, arg):
        self.statusBar.showMessage(arg, 0)
        print(arg)

    def show_error_popup(self, title, message, details=None):
        button_reply = QMessageBox.critical(self, title, message, QMessageBox.Ok)
        return button_reply

    def open_file_name_dialog(self):
        selected = False
        while not selected:
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            file_name, _ = QFileDialog.getOpenFileName(
                self, "Select a file", "", "Non BullShiet Time Lapser project (*.nbtl);;All Files (*)", options=options)
            if file_name:
                if file_name.split(".")[-1] != "nbtl":
                    self.change_status_bar("What is your major malfunction?")
                    self.show_error_popup(
                        "ERROR!", "What is your major malfunction?", QMessageBox.Critical)
                else:
                    selected = True
                    self.change_status_bar("Selected file {0}".format(file_name))
                    return file_name
            else:
                return None

    def save_video_file_dialog(self):
        selected = False
        while not selected:
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            file_name, _ = QFileDialog.getSaveFileName(self, "Save a in a video file", "", "AVI files (*.avi);;All "
                                                                                           "Files (*)", options=options)
            if file_name:
                if file_name.split(".")[-1] != "avi":
                    self.change_status_bar("What is your major malfunction?")
                    self.show_error_popup("ERROR!", "What is your major malfunction?", QMessageBox.Critical)
                else:
                    selected = True
                    self.change_status_bar("Selected file {0}".format(file_name))
                    return file_name
            else:
                return None

    def save_nbtl_file_dialog(self):
        selected = False
        while not selected:
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            file_name, _ = QFileDialog.getSaveFileName(self, "Save a in a NBTL file", "", "Non BullShiet Time Lapser "
                                                                                          "project (*.nbtl);;All Files"
                                                                                          " (*)", options=options)
            if file_name:
                if file_name.split(".")[-1] != "nbtl":
                    self.change_status_bar("What is your major malfunction?")
                    self.show_error_popup("ERROR!", "What is your major malfunction?", QMessageBox.Critical)
                else:
                    selected = True
                    self.change_status_bar("Selected file {0}".format(file_name))
                    return file_name
            else:
                return None

    def select_new_session_button_click(self):
        self.newRecordingSessionButton.setText("Validate")
        self.continueRecordingSessionButton.setEnabled(False)
        self.resolutionComboBox.setEnabled(True)
        self.sessionNameEditBox.setEnabled(True)
        self.sessionTypeComboBox.setEnabled(True)
        self.secondsEditBox.setEnabled(True)
        self.sessionTypeComboBox.currentTextChanged.connect(self.toggle_seconds_visibility)
        self.change_status_bar("Set parameters for new session")
        res = ScreenCapture.get_original_size()
        self.resolutionComboBox.setCurrentText(str(res[0]) + 'x' + str(res[1]))
        self.newRecordingSessionButton.clicked.disconnect()
        self.newRecordingSessionButton.clicked.connect(self.validate_new_session)

    def validate_new_session(self):
        self.change_status_bar("Validating...")
        self.currentProjectName = str(self.sessionNameEditBox.text())
        resolution = str(self.resolutionComboBox.currentText()).split("x")
        self.recording_resolution = [resolution[0], resolution[1]]
        self.recorder_type = str(self.sessionTypeComboBox.currentText())

        if not self.currentProjectName:
            self.show_error_popup("ERROR!", "What is your major malfunction? \n Name of the project cant be empty!",
                                  QMessageBox.Critical)
            return

        if self.secondsEditBox.text():
            self.recorder_seconds = int(self.secondsEditBox.text())
        else:
            if self.recorder_type == RecorderTypes.BullShiet.name:
                self.show_error_popup("ERROR!", "What is your major malfunction? \n You need a timer for a timelapse!",
                                      QMessageBox.Critical)
                return

        if self.recorder_seconds <= 0 and self.recorder_type == RecorderTypes.BullShiet.name:
            self.show_error_popup("ERROR!", "What is your major malfunction numnuts? \n You can't use 0 or negative "
                                            "seconds to record!", QMessageBox.Critical)
            return

        self.change_status_bar("Valid! Ready to record!")

        target = self.save_nbtl_file_dialog()
        if target is None:
            self.change_status_bar("Cancelled")
            return

        ind = RecorderTypes.list_labels().index(self.recorder_type)
        handler = FileHandler()
        handler.open_file(target, "w+")
        handler.write(self.currentProjectName)
        handler.write(str(ind) + ' ' + str(self.recorder_seconds))
        handler.write(resolution[0] + ' ' + resolution[1])
        handler.close_file()
        self.confirmed_origin_file = target
        self.activate_ready_for_recording()
        self.setup_recorders()

    def compile_button_click(self) -> None:
        if not self.importParameters():
            return
        file_target = self.save_video_file_dialog()
        if file_target is None:
            self.change_status_bar("Canceled")
            return

        ret = QMessageBox.question(self, 'Confirm?',
                                   "Are you sure to execute the video compiler? \n This can take a while you know?",
                                   QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if ret != QMessageBox.Yes:
            self.change_status_bar("Canceled")
            return

        self.newRecordingSessionButton.setEnabled(False)
        self.continueRecordingSessionButton.setEnabled(False)
        self.compileSessionButton.setEnabled(False)

        self.change_status_bar("Processing...")
        comp = VideoCompiler()
        comp.configure_compiler(30, file_target)
        comp.compile_file()

        self.newRecordingSessionButton.setEnabled(True)
        self.continueRecordingSessionButton.setEnabled(True)
        self.compileSessionButton.setEnabled(True)
        self.change_status_bar("Compiler completed!")
        ret = QMessageBox.information(self, 'Done!', "Compiled!", QMessageBox.Ok, QMessageBox.Ok)

    def import_parameters(self) -> bool:
        self.change_status_bar("Select a file")
        file_name = self.open_file_name_dialog()
        if file_name is None:
            self.change_status_bar("Canceled")
            return False
        # here i need to read the file and see whats inside
        file_point = FileHandler()
        file_point.open_file(file_name, "r")
        self.currentProjectName = file_point.read_line()[:-1]
        self.sessionNameEditBox.setEnabled(False)
        self.sessionNameEditBox.setText(self.currentProjectName)
        type_pair = file_point.read_line().split()
        self.recorder_type = RecorderTypes.list()[int(type_pair[0])]
        self.toggle_seconds_visibility(self.recorder_type)
        self.sessionTypeComboBox.setCurrentText(self.recorder_type)
        self.recorder_seconds = int(type_pair[1])
        self.secondsEditBox.setText(str(self.recorder_seconds))
        res_pair = file_point.read_line().split()
        self.recording_resolution = [int(res_pair[0]), int(res_pair[1])]
        self.resolutionComboBox.setCurrentText(
            str(self.recording_resolution[0]) + 'x' + str(self.recording_resolution[1]))
        file_point.close_file()
        # future uses
        self.confirmed_origin_file = file_name
        return True

    # this is for older files
    def select_session_clicked(self):
        if not self.importParameters():
            return
        # it should come from a well constructed file
        self.activate_ready_for_recording()
        self.setup_recorders()

    def setup_recorders(self):
        self.current_file_handler = FileHandler()
        self.current_file_handler.open_file(str(self.confirmed_origin_file), 'a')

        if self.recorder_type == RecorderTypes.BullShiet.name:
            self.recorder_instance = LapserRecorder(self.recorder_seconds)
        elif self.recorder_type == RecorderTypes.NonBullShiet.name:
            self.recorder_instance = EventRecorder()
        else:
            self.show_error_popup("ERROR!", "What is your major malfunction? \n The type of the lapser is wrong... "
                                            "somehow!",
                                  QMessageBox.Critical)
            return

        self.recorder_instance.configure_recorder(self.current_file_handler, int(self.recording_resolution[0]),
                                                  int(self.recording_resolution[1]))
        self.mainRecordControlButton.setEnabled(True)
        self.mainRecordControlButton.clicked.connect(self.start_recording)

    def start_recording(self):
        self.mainRecordControlButton.clicked.disconnect()
        self.recorder_instance.start_recording()
        self.change_status_bar('Recording!')
        self.is_recorder_paused = False
        self.mainRecordControlButton.clicked.connect(self.pause_switch)
        self.stopButton.clicked.connect(self.stop_recording)
        self.recorder_instance.pause_switch()
        self.mainRecordControlButton.setText('Pause')

    def stop_recording(self) -> bool:
        ret = QMessageBox.question(self, 'Confirm?',
                                   "Are you sure to Exit? \n This stops the recording and kills the program",
                                   QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if ret != QMessageBox.Yes:
            self.change_status_bar("Canceled")
            return False
        # Is Stopped
        if self.recorder_instance is None:
            return True
        else:
            self.recorder_instance.stop_recording()
        return True

    def pause_switch(self):
        if self.is_recorder_paused:
            # unpause
            self.mainRecordControlButton.setText('Pause')
            self.change_status_bar('Recording!')
            self.stopButton.setEnabled(False)
        else:
            # re-pause
            self.mainRecordControlButton.setText('Continue')
            self.change_status_bar('Paused!')
            self.stopButton.setEnabled(True)
        self.recorder_instance.pause_switch()
        self.is_recorder_paused = not self.is_recorder_paused

    def activate_ready_for_recording(self):
        """
        Disables all the controllers for recording parameters
        and enables the start button.
        """
        self.sessionNameEditBox.setEnabled(False)
        self.secondsEditBox.setEnabled(False)
        self.resolutionComboBox.setEnabled(False)
        self.sessionTypeComboBox.setEnabled(False)
        self.mainRecordControlButton.setEnabled(True)
        self.newRecordingSessionButton.setEnabled(False)
        self.continueRecordingSessionButton.setEnabled(False)
        self.compileSessionButton.setEnabled(False)
        self.change_status_bar("Ready to record")

    def closeEvent(self, evnt):
        if self.stop_recording():
            super(AppWindow, self).closeEvent(evnt)
        else:
            evnt.ignore()

    def changeEvent(self, event):
        if event.type() == QtCore.QEvent.WindowStateChange:
            if self.windowState() & QtCore.Qt.WindowMinimized:
                event.ignore()
                self.show_toggle()
                return

        super(AppWindow, self).changeEvent(event)

    def show_toggle(self):
        if self.is_in_tray:
            self.is_in_tray = not self.is_in_tray
            self.show()
            self.tray_icon.hide()
        else:
            self.is_in_tray = not self.is_in_tray
            self.hide()
            self.tray_icon.show()
            self.tray_icon.showMessage(
                "NBTL",
                "Still Here! :3",
                self.anit_icon,
                2000
            )


